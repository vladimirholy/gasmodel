rn <- rnorm(n = n, mean = 0, sd = 1) # bily sum
w <- cumsum(c(0, sqrt(dt) * rn)) # obycejny Wieneruv proces
x <- mu * t + sigma * w # pridame drift a volatilitu
res <- data.frame(time = t, value = x)
return(res)
}
wiener <- SimulateWiener(mu = 0, sigma = 1) # Wieneruv proces
plot(wiener, type = "l")
wiener.drift <- SimulateWiener(mu = -2, sigma = 1) # Wieneruv proces s driftem a volatilitou
plot(wiener.drift, type = "l")
wiener.exp <- SimulateWiener(mu = 0, sigma = 10)
wiener.exp$value <- exp(wiener.exp$value) # exponencialni Wieneruv proces
plot(wiener.exp, type = "l")
wiener1 <- SimulateWiener(mu = 0, sigma = 1) # 2D Wieneruv proces - souradnice x
wiener2 <- SimulateWiener(mu = 0, sigma = 1) # 2D Wieneruv proces - souradnice y
plot(wiener1$value, wiener2$value, type = "l", asp = 1)
# SIMULACE ORNSTEIN-UHLENBECKOVA PROCESU
# mu - parametr dlouhodobe stredni hodnoty
# sigma - parametr volatility
# tau - parametr rychlosti navratu k dlouhodobe stredni hodnote
# to - koncovy cas
# n - pocet bodu
SimulateOrnsteinUhlenbeck <- function(mu = 0, sigma = 1, tau = 10, to = 1, n = 1000, method = "exact") {
dt <- to / n
t <- seq(from = 0, to = to, length.out = (n + 1))
rn <- rnorm(n = n, mean = 0, sd = 1)
if (method == "exact") {
z <- rep(NA, n + 1)
z[1] <- 0
for (i in 2:(n + 1)) {
z[i] <- mu + (z[i - 1] - mu) * exp(-tau * dt) + sqrt(sigma^2 / 2 / tau * (1 - exp(-2 * tau * dt))) * rn[i - 1]
}
} else if (method == "Euler-Maruyama") {
z <- rep(NA, n + 1)
z[1] <- 0
for (i in 2:(n + 1)) {
z[i] <- z[i - 1] + tau * (mu - z[i - 1]) * dt + sigma * sqrt(dt) * rn[i - 1]
}
}
res <- data.frame(time = t, value = z)
return(res)
}
ou <- SimulateOrnsteinUhlenbeck(mu = 2, sigma = 1, tau = 10)
plot(ou[, 1:2], type = "l")
###################################################
SimulateWiener2 <- function( mu = 10, sigma = 1, n = 1000, lambda = 100) {
t<- cumsum(rexp(n = n, rate = lambda))
rn <- rnorm(n = n-1, mean = 0, sd = 1)
w <- cumsum(c(0,rn))#(1/sqrt(n)) # obycejny wieneruv proces
x <- mu * t + w
res <- data.frame(time = t, value = x)
return(res)
}
A <- SimulateWiener2(mu=1000)
A$time
A$value
plot(A$time,A$value, type = "s",xlim = c(0,1))
###
# CVICENI 12 - WIENERUV PROCES
###
# SIMULACE WIENEROVA PROCESU
# mu - parametr driftu
# sigma - parametr volatility
# to - koncovy cas
# n - pocet bodu
SimulateWiener <- function(mu = 0, sigma = 1, to = 1, n = 1000) {
dt <- to / n
t <- seq(from = 0, to = to, by = dt)
rn <- rnorm(n = n, mean = 0, sd = 1) # bily sum
w <- cumsum(c(0, sqrt(dt) * rn)) # obycejny Wieneruv proces
x <- mu * t + sigma * w # pridame drift a volatilitu
res <- data.frame(time = t, value = x)
return(res)
}
wiener <- SimulateWiener(mu = 0, sigma = 1) # Wieneruv proces
plot(wiener, type = "l")
wiener.drift <- SimulateWiener(mu = -2, sigma = 1) # Wieneruv proces s driftem a volatilitou
plot(wiener.drift, type = "l")
wiener.exp <- SimulateWiener(mu = 0, sigma = 10)
wiener.exp$value <- exp(wiener.exp$value) # exponencialni Wieneruv proces
plot(wiener.exp, type = "l")
wiener1 <- SimulateWiener(mu = 0, sigma = 1) # 2D Wieneruv proces - souradnice x
wiener2 <- SimulateWiener(mu = 0, sigma = 1) # 2D Wieneruv proces - souradnice y
plot(wiener1$value, wiener2$value, type = "l", asp = 1)
# SIMULACE ORNSTEIN-UHLENBECKOVA PROCESU
# mu - parametr dlouhodobe stredni hodnoty
# sigma - parametr volatility
# tau - parametr rychlosti navratu k dlouhodobe stredni hodnote
# to - koncovy cas
# n - pocet bodu
SimulateOrnsteinUhlenbeck <- function(mu = 0, sigma = 1, tau = 10, to = 1, n = 1000, method = "exact") {
dt <- to / n
t <- seq(from = 0, to = to, length.out = (n + 1))
rn <- rnorm(n = n, mean = 0, sd = 1)
if (method == "exact") {
z <- rep(NA, n + 1)
z[1] <- 0
for (i in 2:(n + 1)) {
z[i] <- mu + (z[i - 1] - mu) * exp(-tau * dt) + sqrt(sigma^2 / 2 / tau * (1 - exp(-2 * tau * dt))) * rn[i - 1]
}
} else if (method == "Euler-Maruyama") {
z <- rep(NA, n + 1)
z[1] <- 0
for (i in 2:(n + 1)) {
z[i] <- z[i - 1] + tau * (mu - z[i - 1]) * dt + sigma * sqrt(dt) * rn[i - 1]
}
}
res <- data.frame(time = t, value = z)
return(res)
}
ou <- SimulateOrnsteinUhlenbeck(mu = 2, sigma = 1, tau = 10)
plot(ou[, 1:2], type = "l")
###################################################
SimulateWiener2 <- function( mu = 10, sigma = 1, n = 1000, lambda = 100) {
t<- cumsum(rexp(n = n, rate = lambda))
rn <- rnorm(n = n-1, mean = 0, sd = 1)
w <- cumsum(c(0,rn))#(1/sqrt(n)) # obycejny wieneruv proces
x <- mu * t + w
res <- data.frame(time = t, value = x)
return(res)
}
A <- SimulateWiener2(mu=1000)
A$time
A$value
plot(A$time,A$value, type = "s",xlim = c(0,1))
1061580+52000+86000
(1061580+52000+86000)/12
5*12*27758
_logLik
?logLik
?optim
?optim
?optimHess
optimHess
?optimHess
stats::optimHess
?nloptr
library(nloptr)
nloptr
nloptr::nloptr
stats::optim
1e100
1e100
mean(c(5, 7, Inf))
mean(c(5, 7, Inf), na.rm = TRUE)
1e200
1e500
1e200
1e300
1e400
formatC(lik_mean, digits = 9, format = "f")
formatC(500, digits = 9, format = "f")
formatC(1e100, digits = 9, format = "f")
formatC(2e100, digits = 9, format = "f")
?pmax
min(2, 5)
max(2, 5)
min(NA, 100)
min(NA, 100, na.rm = TRUE)
min(500, 100, na.rm = TRUE)
min(50, 100, na.rm = TRUE)
sum
(list(a = 5), list(b = 7, ff = 8))
c(list(a = 5), list(b = 7, ff = 8))
do.call
?do.call
?optim
?AIC
pinv
?pinv
library(pracma)
?pinv
?try
try(log(-5))
try(log(-5), silent = TRUE)
suppressWarnings(try(log(-5), silent = TRUE))
suppressWarnings(try(a <- log(-5), silent = TRUE))
theta_hessian <- matrix(2, 2)
theta_vcov
theta_hessian <- matrix(nrow = 2, ncol = 2)
suppressWarnings(try(theta_vcov <- pracma::pinv(theta_hessian), silent = TRUE))
pracma::pinv(theta_hessian)
pracma::pinv(theta_hessian)
pracma::pinv(theta_hessian)
pracma::pinv(theta_hessian)
pracma::pinv(theta_hessian)
theta_hessian <- matrix(c(1, NA, NA, NA), nrow = 2, ncol = 2)
suppressWarnings(try(theta_vcov <- pracma::pinv(theta_hessian), silent = TRUE))
theta_vcov
pracma::pinv(theta_hessian)
fit$coef_vcov <- matrix(NA, nrow = utils$theta_num, ncol = utils$theta_num)
suppressWarnings(try(solution$theta_vcov <- pracma::pinv(theta_hessian), silent = TRUE))
sqrt(-5)
coef_sd <- suppressWarnings(sqrt(diag(fit$coef_vcov)))
pnorm(NA)
pnorm(NaN)
fit <- list()
fit$vcov <- matrix(NA_real_, nrow = 3, ncol = 3)
rownames(fit$coef_vcov) <- c("a" ,"b", "c")
fit$vcov <- matrix(NA_real_, nrow = 3, ncol = 3)
fit$vcov
rownames(fit$coef_vcov) <- c("a" ,"b", "c")
rownames(fit$coef_vcov)
fit$coef_vcov <- matrix(NA_real_, nrow = 3, ncol = 3)
rownames(fit$coef_vcov)
rownames(fit$coef_vcov) <- c("a" ,"b", "c")
fit$coef_vcov
colnames(fit$coef_vcov) <- c("a" ,"b", "c")
fit$coef_vcov
coef_sd <- suppressWarnings(sqrt(diag(fit$coef_vcov)))
coef_sd
coef_zstat <- coef / coef_sd
coef_zstat <- coef / coef_sd
coef_sd
NA / NA
coef
coef <- c(NA, NA, NA)
coef_zstat <- coef / coef_sd
coef_zstat
coef_pval <- 2 * pnorm(-abs(coef_zstat))
coef_pval
coef_95_lower <- coef - qnorm(1 - 0.05 / 2) * coef_sd
coef_95_lower
coef_95_upper <- coef + qnorm(1 - 0.05 / 2) * coef_sd
coef_95_upper
aux_vcov
aux_vcov <- matrix(2. )
aux_vcov <- matrix(2, 1.5, 1.5, 3)
aux_vcov
aux_vcov <- matrix(c(2, 1.5, 1.5, 3), 2)
aux_vcov
xxx <- cbind(diag(2), c(0, sqrt(2)))
xxx
aux_vcov %*% xxx
t(xxx) %*% aux_vcov %*% xxx
xxx <- cbind(diag(2), c(0, sqrt(0)))
t(xxx) %*% aux_vcov %*% xxx
aux_cnv[is.na(control$coef_fix_value), is.na(control$coef_fix_value)] <- diag(sum(is.na(control$coef_fix_value)))
xxx
aux_vcov <- matrix(c(2, 1.5, 1.5, 3), 2)
xxx <- cbind(diag(2), c(0, sqrt(0)))
xxx
aux_vcov <- matrix(c(2, 1.5, 1.5, 3), 2)
xxx <- cbind(diag(2), c(0, sqrt(2)))
xxx
t(xxx)
control$coef_fix_value
control$coef_fix_value <- 4
.control <- list()
control <- list()
control$coef_fix_value <- c(NA, NA, 0)
control$coef_fix_other <- matrix(NA, nrow = 3, ncol = 3)
control$coef_fix_other[, 3] <- c(0, 1, NA)
control$coef_fix_value
control$coef_fix_other
control$coef_fix_other <- matrix(NA, nrow = 3, ncol = 3)
control$coef_fix_other[3,] <- c(0, 1, NA)
control$coef_fix_other
control$coef_fix_other[3,] <- c(0, 2, NA)
aux_cnv <- control$coef_fix_other
aux_cnv[is.na(control$coef_fix_value), is.na(control$coef_fix_value)] <- diag(sum(is.na(control$coef_fix_value)))
aux_cnv <- sqrt(aux_cnv[, is.na(control$coef_fix_value)])
aux_cnv
aux_cnv <- control$coef_fix_other
aux_cnv
aux_cnv[is.na(control$coef_fix_value), is.na(control$coef_fix_value)] <- diag(sum(is.na(control$coef_fix_value)))
aux_cnv <- sqrt(aux_cnv[, is.na(control$coef_fix_value)])
aux_cnv
aux_vcov
aux_cnv %*% aux_vcov %*% t(aux_cnv)
aux_cnv <- control$coef_fix_other
aux_cnv[is.na(control$coef_fix_value), is.na(control$coef_fix_value)] <- diag(sum(is.na(control$coef_fix_value)))
aux_cnv <- (aux_cnv[, is.na(control$coef_fix_value)])
fit$coef_vcov <- aux_cnv %*% aux_vcov %*% t(aux_cnv)
fit$coef_vcov
aux_cnv <- control$coef_fix_other
aux_cnv
aux_vcov
fit$coef_vcov <- aux_cnv %*% aux_vcov %*% t(aux_cnv)
fit$coef_vcov
aux_cnv <- control$coef_fix_other
aux_cnv[is.na(control$coef_fix_value), is.na(control$coef_fix_value)] <- diag(sum(is.na(control$coef_fix_value)))
aux_cnv <- (aux_cnv[, is.na(control$coef_fix_value)])
fit$coef_vcov <- aux_cnv %*% aux_vcov %*% t(aux_cnv)
fit$coef_vcov
aux_vcov
aux_cnv <- control$coef_fix_other
aux_cnv[is.na(control$coef_fix_value), is.na(control$coef_fix_value)] <- diag(sum(is.na(control$coef_fix_value)))
aux_cnv <- aux_cnv[, is.na(control$coef_fix_value)]
aux_cnv
fit$coef_vcov <- aux_cnv %*% aux_vcov %*% t(aux_cnv)
fit$coef_vcov
?stats
library(help = "stats")
exp(3*5) = exp(3)^5
exp(3*5)
exp(3)^5
setwd("~/Dropbox/Dokumenty/Univerzita/VÃ½zkum/Library - GAS/gasmodel/R")
distribution_table <- rbind(c("exp",      "rate",  "duration", "uni"),
c("exp",      "scale", "duration", "uni"),
c("gamma",    "rate",  "duration", "uni"),
c("gamma",    "scale", "duration", "uni"),
c("gengamma", "rate",  "duration", "uni"),
c("gengamma", "scale", "duration", "uni"),
c("geom",     "mean",  "count",    "uni"),
c("geom",     "prob",  "count",    "uni"),
c("mnorm",    "std",   "real",     "multi"),
c("negbin",   "nb2",   "count",    "uni"),
c("negbin",   "prob",  "count",    "uni"),
c("norm",     "std",   "real",     "uni"),
c("pois",     "std",   "count",    "uni"),
c("weibull",  "rate",  "count",    "uni"),
c("weibull",  "scale", "count",    "uni"),
c("zigeom",   "mean",  "count",    "uni"),
c("zinegbin", "nb2",   "count",    "uni"),
c("zipois",   "std",   "count",    "uni"))
distribution_table
distribution_table <- as.data.frame(distribution_table)
distribution_table
colnames(distribution_table) <- c("distribution", "parametrization", "category", "dimension")
distribution_table <- as.data.frame(distribution_table)
distribution_table
distribution_table <- as_tibble(distribution_table)
library(tidyverse)
distribution_table <- as_tibble(distribution_table)
distribution_table <- as_tibble(distribution_table)
distribution_table
# LIST OF ALL DISTRIBUTIONS AND PARAMETRIZATIONS -------------------------------
distribution_table <- rbind(c("exp",      "rate",  "duration", "uni"),
c("exp",      "scale", "duration", "uni"),
c("gamma",    "rate",  "duration", "uni"),
c("gamma",    "scale", "duration", "uni"),
c("gengamma", "rate",  "duration", "uni"),
c("gengamma", "scale", "duration", "uni"),
c("geom",     "mean",  "count",    "uni"),
c("geom",     "prob",  "count",    "uni"),
c("mnorm",    "std",   "real",     "multi"),
c("negbin",   "nb2",   "count",    "uni"),
c("negbin",   "prob",  "count",    "uni"),
c("norm",     "std",   "real",     "uni"),
c("pois",     "std",   "count",    "uni"),
c("weibull",  "rate",  "count",    "uni"),
c("weibull",  "scale", "count",    "uni"),
c("zigeom",   "mean",  "count",    "uni"),
c("zinegbin", "nb2",   "count",    "uni"),
c("zipois",   "std",   "count",    "uni"))
colnames(distribution_table) <- c("distribution", "parametrization", "category", "dimension")
distribution_table <- as_tibble(distribution_table)
View(distribution_table)
distribution_table
distribution_table <- as.data.frame(distribution_table)
# LIST OF ALL DISTRIBUTIONS AND PARAMETRIZATIONS -------------------------------
distribution_table <- rbind(c("exp",      "rate",  "duration", "uni"),
c("exp",      "scale", "duration", "uni"),
c("gamma",    "rate",  "duration", "uni"),
c("gamma",    "scale", "duration", "uni"),
c("gengamma", "rate",  "duration", "uni"),
c("gengamma", "scale", "duration", "uni"),
c("geom",     "mean",  "count",    "uni"),
c("geom",     "prob",  "count",    "uni"),
c("mnorm",    "std",   "real",     "multi"),
c("negbin",   "nb2",   "count",    "uni"),
c("negbin",   "prob",  "count",    "uni"),
c("norm",     "std",   "real",     "uni"),
c("pois",     "std",   "count",    "uni"),
c("weibull",  "rate",  "count",    "uni"),
c("weibull",  "scale", "count",    "uni"),
c("zigeom",   "mean",  "count",    "uni"),
c("zinegbin", "nb2",   "count",    "uni"),
c("zipois",   "std",   "count",    "uni"))
colnames(distribution_table) <- c("distribution", "parametrization", "category", "dimension")
distribution_table <- as.data.frame(distribution_table)
distribution_table
# Parameters Function ----------------------------------------------------------
dist_pluce_std_parameters <- function(n) {
group_of_par_names <- c(rep("worth", n))
par_names <- c(paste0("worth", 1:n))
par_support <- c(rep("positive", n))
return(list(group_of_par_names = group_of_par_names, par_names = par_names, par_support = par_support))
}
dist_pluce_std_parameters(5)
# Table of All Distributions and Parametrizations ------------------------------
dist_table <- rbind(c("exp",      "rate",     "duration", "uni"),
c("exp",      "scale",    "duration", "uni"),
c("gamma",    "rate",     "duration", "uni"),
c("gamma",    "scale",    "duration", "uni"),
c("gengamma", "rate",     "duration", "uni"),
c("gengamma", "scale",    "duration", "uni"),
c("geom",     "mean",     "count",    "uni"),
c("geom",     "prob",     "count",    "uni"),
c("mnorm",    "std",      "real",     "multi"),
c("negbin",   "nb2",      "count",    "uni"),
c("negbin",   "prob",     "count",    "uni"),
c("norm",     "std",      "real",     "uni"),
c("pluce",    "std",      "ranking",  "multi"),
c("pois",     "std",      "count",    "uni"),
c("weibull",  "rate",     "count",    "uni"),
c("weibull",  "scale",    "count",    "uni"),
c("zigeom",   "mean",     "count",    "uni"),
c("zinegbin", "nb2",      "count",    "uni"),
c("zipois",   "std",      "count",    "uni"))
colnames(dist_table) <- c("distribution", "parametrization", "type", "dimension")
dist_table <- as.data.frame(dist_table)
dist_table$distribution
"exp" %in% dist_table$distribution
"exp2" %in% dist_table$distribution
# Table of All Distributions and Parametrizations ------------------------------
dist_table <- rbind(c("exp",      "rate",     "duration", "uni"),
c("exp",      "scale",    "duration", "uni"),
c("gamma",    "rate",     "duration", "uni"),
c("gamma",    "scale",    "duration", "uni"),
c("gengamma", "rate",     "duration", "uni"),
c("gengamma", "scale",    "duration", "uni"),
c("geom",     "mean",     "count",    "uni"),
c("geom",     "prob",     "count",    "uni"),
c("mnorm",    "std",      "real",     "multi"),
c("negbin",   "nb2",      "count",    "uni"),
c("negbin",   "prob",     "count",    "uni"),
c("norm",     "std",      "real",     "uni"),
c("pluce",    "std",      "ranking",  "multi"),
c("pois",     "std",      "count",    "uni"),
c("weibull",  "rate",     "count",    "uni"),
c("weibull",  "scale",    "count",    "uni"),
c("zigeom",   "mean",     "count",    "uni"),
c("zinegbin", "nb2",      "count",    "uni"),
c("zipois",   "std",      "count",    "uni"))
colnames(dist_table) <- c("distribution", "parametrization", "type", "dimension")
"exp2" %in% dist_table$distribution
"exp2" %in% dist_table$distributionnames(dist_table) <- c("distribution", "parametrization", "type", "dimension")
> "exp2" %in% dist_table$distribution
Error in dist_table$distribution :
$ operator is invalid for atomic vectors
# Table of All Distributions and Parametrizations ------------------------------
dist_table <- tribble(~distribution, ~parametrization, ~type, ~dimension, ~default
"exp",      "rate",     "duration", "uni",      FALSE,
"exp",      "scale",    "duration", "uni",      FALSE,
"gamma",    "rate",     "duration", "uni",      FALSE,
"gamma",    "scale",    "duration", "uni",      FALSE,
"gengamma", "rate",     "duration", "uni",      FALSE,
"gengamma", "scale",    "duration", "uni",      FALSE,
"geom",     "mean",     "count",    "uni",      FALSE,
"geom",     "prob",     "count",    "uni",      FALSE,
"mnorm",    "std",      "real",     "multi",    FALSE,
"negbin",   "nb2",      "count",    "uni",      FALSE,
"negbin",   "prob",     "count",    "uni",      FALSE,
"norm",     "std",      "real",     "uni",      FALSE,
"pluce",    "std",      "ranking",  "multi",    FALSE,
"pois",     "std",      "count",    "uni",      FALSE,
"weibull",  "rate",     "count",    "uni",      FALSE,
"weibull",  "scale",    "count",    "uni",      FALSE,
"zigeom",   "mean",     "count",    "uni",      FALSE,
"zinegbin", "nb2",      "count",    "uni",      FALSE,
"zipois",   "std",      "count",    "uni",      FALSE)
# Table of All Distributions and Parametrizations ------------------------------
dist_table <- tribble(~distribution, ~parametrization, ~type, ~dimension, ~default,
"exp",      "rate",     "duration", "uni",      FALSE,
"exp",      "scale",    "duration", "uni",      FALSE,
"gamma",    "rate",     "duration", "uni",      FALSE,
"gamma",    "scale",    "duration", "uni",      FALSE,
"gengamma", "rate",     "duration", "uni",      FALSE,
"gengamma", "scale",    "duration", "uni",      FALSE,
"geom",     "mean",     "count",    "uni",      FALSE,
"geom",     "prob",     "count",    "uni",      FALSE,
"mnorm",    "std",      "real",     "multi",    FALSE,
"negbin",   "nb2",      "count",    "uni",      FALSE,
"negbin",   "prob",     "count",    "uni",      FALSE,
"norm",     "std",      "real",     "uni",      FALSE,
"pluce",    "std",      "ranking",  "multi",    FALSE,
"pois",     "std",      "count",    "uni",      FALSE,
"weibull",  "rate",     "count",    "uni",      FALSE,
"weibull",  "scale",    "count",    "uni",      FALSE,
"zigeom",   "mean",     "count",    "uni",      FALSE,
"zinegbin", "nb2",      "count",    "uni",      FALSE,
"zipois",   "std",      "count",    "uni",      FALSE)
View(dist_table)
dist_table
tribble
?tribble
5[4]
5[1]
5[[1]]
5[1]
5/0
length(c())
rep(5, 0)
list(omega = par_start[i], beta = rep(0, times = model@m[i]), alpha = rep(0, times = model@p[i]), phi = rep(0, times = model@q[i]))
lapply(1:utils$par_num, function (i) { list(omega = par_start[i], beta = rep(0, times = model@m[i]), alpha = rep(0, times = model@p[i]), phi = rep(0, times = model@q[i])) })
lapply(1:utils$par_num, function (i) { list(omega = par_start[i], beta = rep(0, times = model@m[i]), alpha = rep(0, times = model@p[i]), phi = rep(0, times = model@q[i])) })
coef_start <- matrix(NA, nrow = 3, ncol = utils$coef_num)
coef_start[1, ] <- rep(0, times = utils$coef_num)
coef_start[2, ] <- struc_to_coef(lapply(1:utils$par_num, function (i) { list(omega = par_start[i], beta = rep(0, times = model@m[i]), alpha = rep(0, times = model@p[i]), phi = rep(0, times = model@q[i])) }), model, utils)
coef_start[3, ] <- struc_to_coef(lapply(1:utils$par_num, function (i) { list(omega = par_start[i] / (1 - 0.5 * (model@q[i] > 0L)), beta = rep(0, times = model@m[i]), alpha = rep(0.5 / model@p[i], times = model@p[i]), phi = rep(0.5 / model@q[i], times = model@q[i])) }), model, utils)
Inf - Inf
?pmax
max(5, Inf - Inf)
max(5, Inf - Inf, na.rm = TRUE)
Inf - 0
(Inf - 0) 1e3
(Inf - 0) / 1e3
?get
do.call
?do.call
?unique
?arima
TRUE == TRUE
5 == TRUE
c() == TRUE
?confint
?lm
?arima
library(nloptr)
?nloptr
